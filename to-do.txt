## Plan

DONE:
- set up standard operators
- function to make tensor products with trivial operators
- function to check linear independence (rank=#operators iff rows linearly dependent)
- function to build closed lie algebras (with cut off)
- function to extend lie algebra with commutations of another lie algebra
- turn into Python script, make folder pretty
- commutation function
- create tests from examples in paper
- create class for Pauli decomposed operators
- code up paocomm function

TO DO:
- make tests from paper more general for n and tidy up with modulo
- function to check linear independence via QR decomp
- function returning linear decomposition of an operator into Lie algebra operators
- function reducing list of operators to minimal set of linearly independent operators
- given A_n find B st [A_n, B] = 0 for all n (code up slow way finding overlap of n=1 case? works for n=2)
- check out if functions in mathematica useful to convert
- create a pfind_algebra and pcomplete_algebra
- put find_comm into package?
- test p_ao_comm
- make __str__ in Pauli class
- check all decomps are paulis in __init__ of Pauli class


##### Problems

FIXED:
- original Ops in complete_algebra need to be linearly independent: check "complete_algebra([X, X], 5)"
- final Lie algebra is list of huge matrices, not their tensor decomposition (way to simplify down from linear dependencies?)

NOT FIXED:
- cannot determine how an operator is linearly dependent on operators in algebra (use qr decomp: cols of r give dependencies)